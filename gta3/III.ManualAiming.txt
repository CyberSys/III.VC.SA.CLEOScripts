{$CLEO .cs}
0000:

0@ = 0
IF 0124:
THEN
 0@ = 1
END
IF 8124:
THEN
 0@ = 1
END
IF 0@ == 0   // 0@ == Is GInput installed?
THEN
0ACA: show_text_box "You need to install GInput in order to use this script: gtaforums.com/topic/562765-ginput/"
0A93: end_custom_thread
END

const
LEFTSTICKX            = 0  //<LS>
LEFTSTICKY            = 1  //LS^
RIGHTSTICKX           = 2  //<RS>
RIGHTSTICKY           = 3  //RS^
LEFTSHOULDER1         = 4  //LB
LEFTSHOULDER2         = 5  //LT
RIGHTSHOULDER1        = 6  //RB
RIGHTSHOULDER2        = 7  //RT
DPADUP                = 8  //UP
DPADDOWN              = 9  //DOWN
DPADLEFT              = 10 //LEFT
DPADRIGHT             = 11 //RIGHT
START                 = 12 //START
SELECT                = 13 //SELECT
SQUARE                = 14 //X
TRIANGLE              = 15 //Y
CROSS                 = 16 //A
CIRCLE                = 17 //B
LEFTSHOCK             = 18 //LS
RIGHTSHOCK            = 19 //RS
GUIDE                 = 20 //Guide
end    

0A8C: write_memory 0x4F215E size 1 value 0x90 virtual_protect 1
0A8C: write_memory 0x4F215F size 1 value 0xE9 virtual_protect 1

0A8C: write_memory 0x4CB63D size 1 value 0xE9 virtual_protect 1
0AC6: 5@ = label @middle offset
0606: set_mem_offset memory pointer 0x4CB63E pointing_to 5@ virtual_protect 1
5@ += 0x1
0606: set_mem_offset memory pointer 5@ pointing_to 0x4D48E0 virtual_protect 1

0AC6: 5@ = label @start offset
5@ += 0x1
0606: set_mem_offset memory pointer 5@ pointing_to 0x4E6BA0 virtual_protect 1

0AC6: 5@ = label @start2 offset
5@ += 0x1
0606: set_mem_offset memory pointer 5@ pointing_to 0x4E6BA0 virtual_protect 1

0AC6: 5@ = label @end offset
5@ += 0x1
0606: set_mem_offset memory pointer 5@ pointing_to 0x4CB642 virtual_protect 1

0AC6: 5@ = label @end2 offset
5@ += 0x1
0606: set_mem_offset memory pointer 5@ pointing_to 0x4CB642 virtual_protect 1

//0AC6: 5@ = label @start offset
//5@ += 0x1

9@ = 6
10@ = 17



while true
wait 0

if
 8124: not last_input_was_pad
then
 1@ = 5
 4@ = 6
 5@ = 7
 6@ = 15
 8@ = 16
 10@ = 17
else
 1@ = DPADLEFT
 4@ = LEFTSHOULDER2
 5@ = DPADRIGHT
 6@ = TRIANGLE
 8@ = CROSS
 10@ = RIGHTSHOULDER2
end

if 
 00E1:   player 0 pressed_key 4@ //Aim key
then
    while 00E1:   player 0 pressed_key 4@ //Aim key
    wait 0 
       if and
        80E0:   not player $PLAYER_CHAR driving
        80E1:   not player 0 pressed_key 8@ //Sprint key
        80E1:   not player 0 pressed_key 1@ //prev-next
        80E1:   not player 0 pressed_key 5@ //weapon
        80E1:   not player 0 pressed_key 6@ //enter-exit  
       then
        0AB1: call_scm_func @weapon_state params_count 0 7@
          if and
   //82D7:   not player $PLAYER_CHAR currentweapon == 1
   //82D7:   not player $PLAYER_CHAR currentweapon == 7
   //82D7:   not player $PLAYER_CHAR currentweapon == 8
   //82D7:   not player $PLAYER_CHAR currentweapon == 10
   //82D7:   not player $PLAYER_CHAR currentweapon == 11
   //82D7:   not player $PLAYER_CHAR currentweapon == 12
           00E1:   player 0 pressed_key 4@ //Aim key
           8AB0: not key_pressed 0x01 // VK_LBUTTON
           8601: not is_button_pressed_on_pad RIGHTSHOULDER2 with_sensitivity 0xAA
           7@ <> 2
          then  
              0AC6: 12@ = label @start offset
              12@ += 0x1
              0606: set_mem_offset memory pointer 12@ memory to point 0x4E60B0 virtual_protect 1 
              046F: store_player $player_char currently_armed_weapon_to 2@
              gosub @weapon_check
                  if 
                   2@ == true
                  then   
                   0A8C: write_memory 0x004F1F43 size 1 value 0x84 virtual_protect 1  
                   //0602: emulate_button_press_on_pad 4@ sensitivity 0x00
                   0602: emulate_button_press_on_pad 10@ sensitivity 0xFE 
                  else
                   //0A8C: write_memory 0x52B491 size 4 value 0x008B850F virtual_protect 1
                  // 0A8C: write_memory 0x52B495 size 2 value 0x0000 virtual_protect 1  
                  end  
                  
                   /*if and
                    8124: last_input_was_keyboard
                    0AB0:  key_pressed 82 //r 
                   then
                    0AB1: call_scm_func @reloading params_count 0 13@
                    0A8C: write_memory 0x0052B491 size 6 value 0x90 virtual_protect 1
                    0AC6: 0@ = label @jnz2 offset
                    0A8C: write_memory 0x0052B491 size 1 value 0xE9 virtual_protect 1
                    0606: set_mem_offset memory pointer 0x0052B492 pointing_to 0@ virtual_protect 1
                    0AC6: 14@ = label @start3 offset
                    14@ += 0x1
                    0606: set_mem_offset memory pointer 14@ pointing_to 0x0052B070 virtual_protect 1 
                    0602: emulate_button_press_on_pad 10@ sensitivity 0xFF 
                     0A96: 9@ = actor $player_actor struct
                     9@ += 0x14C
                     0A8C: write_memory 9@ size 1 value 3 virtual_protect 1  // avoiding weird hands animation bug 
                    0A8C: write_memory 13@ size 4 value 2 virtual_protect 1
                   end */

                   /*if and
                    0124: last_input_was_pad
                    0601: is_button_pressed_on_pad CIRCLE
                   then
                    0AB1: call_scm_func @reloading params_count 0 13@
                    0A8C: write_memory 0x0052B491 size 6 value 0x90 virtual_protect 1
                    0AC6: 0@ = label @jnz2 offset
                    0A8C: write_memory 0x0052B491 size 1 value 0xE9 virtual_protect 1
                    0606: set_mem_offset memory pointer 0x0052B492 pointing_to 0@ virtual_protect 1
                    0AC6: 14@ = label @start3 offset
                    14@ += 0x1
                    0606: set_mem_offset memory pointer 14@ pointing_to 0x0052B070 virtual_protect 1 
                    0602: emulate_button_press_on_pad 10@ sensitivity 0xFF  
                     0A96: 9@ = actor $player_actor struct
                     9@ += 0x14C
                     0A8C: write_memory 9@ size 1 value 3 virtual_protect 1  // avoiding weird hands animation bug 
                    0A8C: write_memory 13@ size 4 value 2 virtual_protect 1
                   end */ 
          else    
           /*0AC6: 14@ = label @start3 offset
           000A: 14@ += 0x1
           0A8D: 14@ = read_memory 14@ size 1 virtual_protect 1 
           0AC6: 15@ = label @start2 offset
           000A: 15@ += 0x1
           0A8D: 15@ = read_memory 15@ size 1 virtual_protect 1 
           000E: 14@ -= 15@ // integer values  */
           
              if or
               00E1:    player 0 pressed_key 8@ //Sprint key
               00E1:    player 0 pressed_key 1@ //prev-next
               00E1:    player 0 pressed_key 5@ //weapon
               00E1:    player 0 pressed_key 6@ //enter-exit
               00E1:    player 0 pressed_key 8@  
               //14@ <> 0x0A
              then
               0AC6: 12@ = label @start offset
               12@ += 0x1
               0606: set_mem_offset memory pointer 12@ memory to point 0x4E60B0 virtual_protect 1 
               0A8C: write_memory 0x004F1F43 size 1 value 0x84 virtual_protect 1 
              end  
          end  
       end
       
       
       if or
        0601: is_button_pressed_on_pad CIRCLE with_sensitivity 0xAA
        0601: is_button_pressed_on_pad CIRCLE with_sensitivity 0x00
       then
        046F: store_player $player_char currently_armed_weapon_to 2@
        gosub @weapon_check 
       	 if 
       	  2@ == true
       	 then
       	    if and
       		 80E1:    player 0 pressed_key 1@ //prev-next
       		 80E1:    player 0 pressed_key 5@ //weapon
       		 17@ < 0
       		 80E0:   not player $PLAYER_CHAR driving
       		then
       		 0AB1: call_scm_func @reloading params_count 0 13@
       		 0A8D: 13@ = read_memory 13@ size 4 virtual_protect 0
       		  if
       		   13@ <> 2
       		  then  
       		   wait 0
       		   0A96: 9@ = actor $player_actor struct
       		   9@ += 0x154
       		   0A8C: write_memory 9@ size 1 value 3 virtual_protect 1  
       			0AB1: call_scm_func @walk 0
       		   0A8C: write_memory 0x004F1F43 size 1 value 0x84 virtual_protect 1
       		   0AC6: 12@ = label @start offset
       		   12@ += 0x1
       		   0606: set_mem_offset memory pointer 12@ pointing_to 0x4E60B0 virtual_protect 1    
       		  end
       		end 
       		 17@ = 0 
       	 end    
       else  
        if
         0601: is_button_pressed_on_pad CIRCLE with_sensitivity 0xFF
        then
        046F: store_player $player_char currently_armed_weapon_to 2@
        gosub @weapon_check
           if 
            7@ <> 2
           then
             if 
              2@ == true
             then                  
               0A8C: write_memory 0x004F1F43 size 1 value 0x85 virtual_protect 1
               0AC6: 12@ = label @start offset
               12@ += 0x1
               0606: set_mem_offset memory pointer 12@ pointing_to 0x4E6BA0 virtual_protect 1  
             else
              //0A8C: write_memory 0x52B491 size 4 value 0x008B850F virtual_protect 1
              //0A8C: write_memory 0x52B495 size 2 value 0x0000 virtual_protect 1
             end
            end  
            17@ = -5000  
        end  
       end
    end // while 00E1

    0A8C: write_memory 0x4E6C75 size 2 value 0x9090 virtual_protect 0  
    
    17@ = -5000
    repeat
    wait 0                                                                    ?????????????
    0602: emulate_button_press_on_pad 10@ sensitivity 0xFF
    until 17@ < 0 
    0A8C: write_memory 0x004F1F43 size 1 value 0x85 virtual_protect 1
    0AC6: 12@ = label @start offset
    12@ += 0x1
    0606: set_mem_offset memory pointer 12@ pointing_to 0x4E6BA0 virtual_protect 1   
    wait 0
    0A8C: write_memory 0x4E6C75 size 2 value 0x2B74 virtual_protect 0 
end // 00E1:   player 0 pressed_key 4@ //Aim key




////////////////

 
 
 
end   

:weapon_check
if and
2@ >= 2
2@ <= 11
then
    0419: 2@ = player $player_char weapon 2@ ammo
    if
     2@ > 0
    then
     2@ = true
    else
     2@ = false
    end
end
return

:weapon_state
0A96: 1@ = actor $PLAYER_ACTOR struct
1@ += 0x360
0010: 0@ *= 0x18 // integer values
0058: 1@ += 0@ // integer values
0A8D: 0@ = read_memory 1@ size 4 virtual_protect 1
0AB2: ret 1 0@ 

:reloading
0A96: 1@ = actor $PLAYER_ACTOR struct
1@ += 0x360
0010: 0@ *= 0x18 // integer values
0058: 1@ += 0@ // integer values
0AB2: ret 1 1@

:walk
0054: store_player $player_char position_to 0@ 1@ 2@
0211: actor $player_actor walk_to 0@ 1@
0AB2: ret 0


:middle
hex
E8 00000000           //- call 004D48E0 //CPED::ISPLAYER
84 C0                 //- test al,al
74 0A                 //- je ***
end

:start
hex
E8 00000000           //- call 004E6BA0
end
:end2
hex
E9 00000000           //- jmp 004CB642
end

:start2
hex
E8 00000000           //- call 004E6BA0
end

:end
hex
E9 00000000           //- jmp 004CB642
end
                                                                           